### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  access_token: String
  expires_at: Int
  id: ID!
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  type: String!
  userId: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

type Book {
  bookContents: [BookContent!]!
  bookLogCount: Int!
  bookLogs: [BookLog!]!
  bookshelfCount: Int!
  bookshelfs: [Bookshelf!]!
  createdAt: DateTime!
  id: ID!
  image: String!
  title: String!
  updatedAt: DateTime!
  url: String!
}

type BookContent {
  book: Book!
  bookId: String!
  createdAt: DateTime!
  heading: String!
  id: ID!
  index: Float!
  type: String!
  updatedAt: DateTime!
}

type BookLog {
  book: Book!
  bookId: String!
  createdAt: DateTime!
  id: ID!
  log: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type Bookshelf {
  book: Book!
  bookId: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createBookLog(bookId: String!, log: String!): BookLog!
  onboardUser(image: String, name: String!, userId: String!): User!
  resetUser(userId: String!): User!
  updateBookLog(bookLogId: String!, log: String!): BookLog!
}

type Query {
  book(bookId: String!): Book!
  bookContents(bookId: String!): [BookContent!]!
  bookLog(bookId: String!, userId: String!): BookLog
  bookLogs(userId: String!): [BookLog!]!
  books(keyword: String): [Book!]!
  bookshelfs(userId: String!): [Bookshelf!]!
  user(userId: String!): User!
}

type Session {
  expires: DateTime!
  id: ID!
  sessionToken: String!
  user: User!
  userId: String!
}

type User {
  bookLogs: [BookLog!]!
  bookshelfs: [Bookshelf!]!
  email: String
  emailVerified: DateTime
  id: ID!
  image: String
  name: String
  onboarding: String
  profile: String
}

type VerificationToken {
  expires: DateTime!
  identifier: String!
  token: String!
}