### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  access_token: String
  expires_at: Int
  id: ID!
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  type: String!
  userId: String!
}

type AccountAvgAggregateOutputType {
  expires_at: Float
}

input AccountAvgOrderByAggregateInput {
  expires_at: SortOrder
}

type AccountCountAggregateOutputType {
  _all: Int!
  access_token: Int!
  expires_at: Int!
  id: Int!
  id_token: Int!
  provider: Int!
  providerAccountId: Int!
  refresh_token: Int!
  scope: Int!
  session_state: Int!
  token_type: Int!
  type: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

input AccountCreateManyUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountCreateManyUserInputEnvelope {
  data: AccountCreateManyUserInput!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput]
  create: [AccountCreateWithoutUserInput]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountUncheckedCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregateOutputType {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: String
}

input AccountMaxOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

type AccountMinAggregateOutputType {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: String
}

input AccountMinOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _avg: AccountAvgOrderByAggregateInput
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  access_token
  expires_at
  id
  id_token
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput]
  NOT: [AccountScalarWhereInput]
  OR: [AccountScalarWhereInput]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput]
  NOT: [AccountScalarWhereWithAggregatesInput]
  OR: [AccountScalarWhereWithAggregatesInput]
  access_token: StringNullableWithAggregatesFilter
  expires_at: IntNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  id_token: StringNullableWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  refresh_token: StringNullableWithAggregatesFilter
  scope: StringNullableWithAggregatesFilter
  session_state: StringNullableWithAggregatesFilter
  token_type: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type AccountSumAggregateOutputType {
  expires_at: Int
}

input AccountSumOrderByAggregateInput {
  expires_at: SortOrder
}

input AccountUncheckedCreateInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

input AccountUncheckedCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput]
  create: [AccountCreateWithoutUserInput]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountUncheckedCreateWithoutUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountUncheckedUpdateInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input AccountUncheckedUpdateManyInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input AccountUncheckedUpdateManyWithoutAccountsInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUncheckedUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput]
  create: [AccountCreateWithoutUserInput]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput]
  deleteMany: [AccountScalarWhereInput]
  disconnect: [AccountWhereUniqueInput]
  set: [AccountWhereUniqueInput]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput]
}

input AccountUncheckedUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpdateInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsInput
}

input AccountUpdateManyMutationInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUncheckedUpdateManyWithoutAccountsInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput]
  create: [AccountCreateWithoutUserInput]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput]
  deleteMany: [AccountScalarWhereInput]
  disconnect: [AccountWhereUniqueInput]
  set: [AccountWhereUniqueInput]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUncheckedUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountUncheckedCreateWithoutUserInput!
  update: AccountUncheckedUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput]
  NOT: [AccountWhereInput]
  OR: [AccountWhereInput]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
}

type AggregateAccount {
  _avg: AccountAvgAggregateOutputType
  _count: AccountCountAggregateOutputType
  _max: AccountMaxAggregateOutputType
  _min: AccountMinAggregateOutputType
  _sum: AccountSumAggregateOutputType
}

type AggregateBook {
  _avg: BookAvgAggregateOutputType
  _count: BookCountAggregateOutputType
  _max: BookMaxAggregateOutputType
  _min: BookMinAggregateOutputType
  _sum: BookSumAggregateOutputType
}

type AggregateBookContent {
  _avg: BookContentAvgAggregateOutputType
  _count: BookContentCountAggregateOutputType
  _max: BookContentMaxAggregateOutputType
  _min: BookContentMinAggregateOutputType
  _sum: BookContentSumAggregateOutputType
}

type AggregateBookLog {
  _count: BookLogCountAggregateOutputType
  _max: BookLogMaxAggregateOutputType
  _min: BookLogMinAggregateOutputType
}

type AggregateBookshelf {
  _count: BookshelfCountAggregateOutputType
  _max: BookshelfMaxAggregateOutputType
  _min: BookshelfMinAggregateOutputType
}

type AggregateSession {
  _count: SessionCountAggregateOutputType
  _max: SessionMaxAggregateOutputType
  _min: SessionMinAggregateOutputType
}

type AggregateTopics {
  _avg: TopicsAvgAggregateOutputType
  _count: TopicsCountAggregateOutputType
  _max: TopicsMaxAggregateOutputType
  _min: TopicsMinAggregateOutputType
  _sum: TopicsSumAggregateOutputType
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
}

type AggregateUsers {
  _avg: UsersAvgAggregateOutputType
  _count: UsersCountAggregateOutputType
  _max: UsersMaxAggregateOutputType
  _min: UsersMinAggregateOutputType
  _sum: UsersSumAggregateOutputType
}

type AggregateVerificationToken {
  _count: VerificationTokenCountAggregateOutputType
  _max: VerificationTokenMaxAggregateOutputType
  _min: VerificationTokenMinAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

type Book {
  bookContents: [BookContent!]!
  bookLogCount: Int!
  bookLogs: [BookLog!]!
  bookshelfCount: Int!
  createdAt: DateTime!
  id: ID!
  image: String!
  title: String!
  updatedAt: DateTime!
  url: String!
}

type BookAvgAggregateOutputType {
  bookLogCount: Float
  bookshelfCount: Float
}

input BookAvgOrderByAggregateInput {
  bookLogCount: SortOrder
  bookshelfCount: SortOrder
}

type BookContent {
  book: Book!
  bookId: String!
  createdAt: DateTime!
  heading: String!
  id: ID!
  index: Float!
  type: String!
  updatedAt: DateTime!
}

type BookContentAvgAggregateOutputType {
  index: Float
}

input BookContentAvgOrderByAggregateInput {
  index: SortOrder
}

type BookContentCountAggregateOutputType {
  _all: Int!
  bookId: Int!
  createdAt: Int!
  heading: Int!
  id: Int!
  index: Int!
  type: Int!
  updatedAt: Int!
}

input BookContentCountOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  heading: SortOrder
  id: SortOrder
  index: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input BookContentCreateInput {
  book: BookCreateNestedOneWithoutBookContentsInput!
  createdAt: DateTime
  heading: String!
  id: String
  index: Float!
  type: String!
  updatedAt: DateTime
}

input BookContentCreateManyBookInput {
  createdAt: DateTime
  heading: String!
  id: String
  index: Float!
  type: String!
  updatedAt: DateTime
}

input BookContentCreateManyBookInputEnvelope {
  data: BookContentCreateManyBookInput!
  skipDuplicates: Boolean
}

input BookContentCreateManyInput {
  bookId: String!
  createdAt: DateTime
  heading: String!
  id: String
  index: Float!
  type: String!
  updatedAt: DateTime
}

input BookContentCreateNestedManyWithoutBookInput {
  connect: [BookContentWhereUniqueInput]
  connectOrCreate: [BookContentCreateOrConnectWithoutBookInput]
  create: [BookContentCreateWithoutBookInput]
  createMany: BookContentCreateManyBookInputEnvelope
}

input BookContentCreateOrConnectWithoutBookInput {
  create: BookContentUncheckedCreateWithoutBookInput!
  where: BookContentWhereUniqueInput!
}

input BookContentCreateWithoutBookInput {
  createdAt: DateTime
  heading: String!
  id: String
  index: Float!
  type: String!
  updatedAt: DateTime
}

input BookContentListRelationFilter {
  every: BookContentWhereInput
  none: BookContentWhereInput
  some: BookContentWhereInput
}

type BookContentMaxAggregateOutputType {
  bookId: String
  createdAt: DateTime
  heading: String
  id: String
  index: Float
  type: String
  updatedAt: DateTime
}

input BookContentMaxOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  heading: SortOrder
  id: SortOrder
  index: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

type BookContentMinAggregateOutputType {
  bookId: String
  createdAt: DateTime
  heading: String
  id: String
  index: Float
  type: String
  updatedAt: DateTime
}

input BookContentMinOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  heading: SortOrder
  id: SortOrder
  index: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input BookContentOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookContentOrderByWithAggregationInput {
  _avg: BookContentAvgOrderByAggregateInput
  _count: BookContentCountOrderByAggregateInput
  _max: BookContentMaxOrderByAggregateInput
  _min: BookContentMinOrderByAggregateInput
  _sum: BookContentSumOrderByAggregateInput
  bookId: SortOrder
  createdAt: SortOrder
  heading: SortOrder
  id: SortOrder
  index: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input BookContentOrderByWithRelationInput {
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  heading: SortOrder
  id: SortOrder
  index: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum BookContentScalarFieldEnum {
  bookId
  createdAt
  heading
  id
  index
  type
  updatedAt
}

input BookContentScalarWhereInput {
  AND: [BookContentScalarWhereInput]
  NOT: [BookContentScalarWhereInput]
  OR: [BookContentScalarWhereInput]
  bookId: StringFilter
  createdAt: DateTimeFilter
  heading: StringFilter
  id: StringFilter
  index: FloatFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input BookContentScalarWhereWithAggregatesInput {
  AND: [BookContentScalarWhereWithAggregatesInput]
  NOT: [BookContentScalarWhereWithAggregatesInput]
  OR: [BookContentScalarWhereWithAggregatesInput]
  bookId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  heading: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  index: FloatWithAggregatesFilter
  type: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type BookContentSumAggregateOutputType {
  index: Float
}

input BookContentSumOrderByAggregateInput {
  index: SortOrder
}

input BookContentUncheckedCreateInput {
  bookId: String!
  createdAt: DateTime
  heading: String!
  id: String
  index: Float!
  type: String!
  updatedAt: DateTime
}

input BookContentUncheckedCreateNestedManyWithoutBookInput {
  connect: [BookContentWhereUniqueInput]
  connectOrCreate: [BookContentCreateOrConnectWithoutBookInput]
  create: [BookContentCreateWithoutBookInput]
  createMany: BookContentCreateManyBookInputEnvelope
}

input BookContentUncheckedCreateWithoutBookInput {
  createdAt: DateTime
  heading: String!
  id: String
  index: Float!
  type: String!
  updatedAt: DateTime
}

input BookContentUncheckedUpdateInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  heading: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  index: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookContentUncheckedUpdateManyInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  heading: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  index: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookContentUncheckedUpdateManyWithoutBookContentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  heading: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  index: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookContentUncheckedUpdateManyWithoutBookInput {
  connect: [BookContentWhereUniqueInput]
  connectOrCreate: [BookContentCreateOrConnectWithoutBookInput]
  create: [BookContentCreateWithoutBookInput]
  createMany: BookContentCreateManyBookInputEnvelope
  delete: [BookContentWhereUniqueInput]
  deleteMany: [BookContentScalarWhereInput]
  disconnect: [BookContentWhereUniqueInput]
  set: [BookContentWhereUniqueInput]
  update: [BookContentUpdateWithWhereUniqueWithoutBookInput]
  updateMany: [BookContentUpdateManyWithWhereWithoutBookInput]
  upsert: [BookContentUpsertWithWhereUniqueWithoutBookInput]
}

input BookContentUncheckedUpdateWithoutBookInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  heading: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  index: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookContentUpdateInput {
  book: BookUpdateOneRequiredWithoutBookContentsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  heading: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  index: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookContentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  heading: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  index: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookContentUpdateManyWithWhereWithoutBookInput {
  data: BookContentUncheckedUpdateManyWithoutBookContentsInput!
  where: BookContentScalarWhereInput!
}

input BookContentUpdateManyWithoutBookInput {
  connect: [BookContentWhereUniqueInput]
  connectOrCreate: [BookContentCreateOrConnectWithoutBookInput]
  create: [BookContentCreateWithoutBookInput]
  createMany: BookContentCreateManyBookInputEnvelope
  delete: [BookContentWhereUniqueInput]
  deleteMany: [BookContentScalarWhereInput]
  disconnect: [BookContentWhereUniqueInput]
  set: [BookContentWhereUniqueInput]
  update: [BookContentUpdateWithWhereUniqueWithoutBookInput]
  updateMany: [BookContentUpdateManyWithWhereWithoutBookInput]
  upsert: [BookContentUpsertWithWhereUniqueWithoutBookInput]
}

input BookContentUpdateWithWhereUniqueWithoutBookInput {
  data: BookContentUncheckedUpdateWithoutBookInput!
  where: BookContentWhereUniqueInput!
}

input BookContentUpdateWithoutBookInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  heading: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  index: FloatFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookContentUpsertWithWhereUniqueWithoutBookInput {
  create: BookContentUncheckedCreateWithoutBookInput!
  update: BookContentUncheckedUpdateWithoutBookInput!
  where: BookContentWhereUniqueInput!
}

input BookContentWhereInput {
  AND: [BookContentWhereInput]
  NOT: [BookContentWhereInput]
  OR: [BookContentWhereInput]
  book: BookWhereInput
  bookId: StringFilter
  createdAt: DateTimeFilter
  heading: StringFilter
  id: StringFilter
  index: FloatFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input BookContentWhereUniqueInput {
  id: String
}

type BookCountAggregateOutputType {
  _all: Int!
  bookLogCount: Int!
  bookshelfCount: Int!
  createdAt: Int!
  id: Int!
  image: Int!
  title: Int!
  updatedAt: Int!
  url: Int!
}

input BookCountOrderByAggregateInput {
  bookLogCount: SortOrder
  bookshelfCount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

type BookCountOutputType {
  bookContents: Int!
  bookLogs: Int!
  bookshelfs: Int!
}

input BookCreateInput {
  bookContents: BookContentCreateNestedManyWithoutBookInput
  bookLogCount: Int!
  bookLogs: BookLogCreateNestedManyWithoutBookInput
  bookshelfCount: Int!
  bookshelfs: BookshelfCreateNestedManyWithoutBookInput
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input BookCreateManyInput {
  bookLogCount: Int!
  bookshelfCount: Int!
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input BookCreateNestedOneWithoutBookContentsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookContentsInput
  create: BookUncheckedCreateWithoutBookContentsInput
}

input BookCreateNestedOneWithoutBookLogsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookLogsInput
  create: BookUncheckedCreateWithoutBookLogsInput
}

input BookCreateNestedOneWithoutBookshelfsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookshelfsInput
  create: BookUncheckedCreateWithoutBookshelfsInput
}

input BookCreateOrConnectWithoutBookContentsInput {
  create: BookUncheckedCreateWithoutBookContentsInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutBookLogsInput {
  create: BookUncheckedCreateWithoutBookLogsInput!
  where: BookWhereUniqueInput!
}

input BookCreateOrConnectWithoutBookshelfsInput {
  create: BookUncheckedCreateWithoutBookshelfsInput!
  where: BookWhereUniqueInput!
}

input BookCreateWithoutBookContentsInput {
  bookLogCount: Int!
  bookLogs: BookLogCreateNestedManyWithoutBookInput
  bookshelfCount: Int!
  bookshelfs: BookshelfCreateNestedManyWithoutBookInput
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input BookCreateWithoutBookLogsInput {
  bookContents: BookContentCreateNestedManyWithoutBookInput
  bookLogCount: Int!
  bookshelfCount: Int!
  bookshelfs: BookshelfCreateNestedManyWithoutBookInput
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input BookCreateWithoutBookshelfsInput {
  bookContents: BookContentCreateNestedManyWithoutBookInput
  bookLogCount: Int!
  bookLogs: BookLogCreateNestedManyWithoutBookInput
  bookshelfCount: Int!
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

type BookLog {
  book: Book!
  bookId: String!
  createdAt: DateTime!
  id: ID!
  log: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type BookLogCountAggregateOutputType {
  _all: Int!
  bookId: Int!
  createdAt: Int!
  id: Int!
  log: Int!
  updatedAt: Int!
  userId: Int!
}

input BookLogCountOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  log: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookLogCreateInput {
  book: BookCreateNestedOneWithoutBookLogsInput!
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutBookLogsInput!
}

input BookLogCreateManyBookInput {
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
  userId: String!
}

input BookLogCreateManyBookInputEnvelope {
  data: BookLogCreateManyBookInput!
  skipDuplicates: Boolean
}

input BookLogCreateManyInput {
  bookId: String!
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
  userId: String!
}

input BookLogCreateManyUserInput {
  bookId: String!
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
}

input BookLogCreateManyUserInputEnvelope {
  data: BookLogCreateManyUserInput!
  skipDuplicates: Boolean
}

input BookLogCreateNestedManyWithoutBookInput {
  connect: [BookLogWhereUniqueInput]
  connectOrCreate: [BookLogCreateOrConnectWithoutBookInput]
  create: [BookLogCreateWithoutBookInput]
  createMany: BookLogCreateManyBookInputEnvelope
}

input BookLogCreateNestedManyWithoutUserInput {
  connect: [BookLogWhereUniqueInput]
  connectOrCreate: [BookLogCreateOrConnectWithoutUserInput]
  create: [BookLogCreateWithoutUserInput]
  createMany: BookLogCreateManyUserInputEnvelope
}

input BookLogCreateOrConnectWithoutBookInput {
  create: BookLogUncheckedCreateWithoutBookInput!
  where: BookLogWhereUniqueInput!
}

input BookLogCreateOrConnectWithoutUserInput {
  create: BookLogUncheckedCreateWithoutUserInput!
  where: BookLogWhereUniqueInput!
}

input BookLogCreateWithoutBookInput {
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutBookLogsInput!
}

input BookLogCreateWithoutUserInput {
  book: BookCreateNestedOneWithoutBookLogsInput!
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
}

input BookLogListRelationFilter {
  every: BookLogWhereInput
  none: BookLogWhereInput
  some: BookLogWhereInput
}

type BookLogMaxAggregateOutputType {
  bookId: String
  createdAt: DateTime
  id: String
  log: String
  updatedAt: DateTime
  userId: String
}

input BookLogMaxOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  log: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type BookLogMinAggregateOutputType {
  bookId: String
  createdAt: DateTime
  id: String
  log: String
  updatedAt: DateTime
  userId: String
}

input BookLogMinOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  log: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookLogOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookLogOrderByWithAggregationInput {
  _count: BookLogCountOrderByAggregateInput
  _max: BookLogMaxOrderByAggregateInput
  _min: BookLogMinOrderByAggregateInput
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  log: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookLogOrderByWithRelationInput {
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  log: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum BookLogScalarFieldEnum {
  bookId
  createdAt
  id
  log
  updatedAt
  userId
}

input BookLogScalarWhereInput {
  AND: [BookLogScalarWhereInput]
  NOT: [BookLogScalarWhereInput]
  OR: [BookLogScalarWhereInput]
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  log: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BookLogScalarWhereWithAggregatesInput {
  AND: [BookLogScalarWhereWithAggregatesInput]
  NOT: [BookLogScalarWhereWithAggregatesInput]
  OR: [BookLogScalarWhereWithAggregatesInput]
  bookId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  log: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input BookLogUncheckedCreateInput {
  bookId: String!
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
  userId: String!
}

input BookLogUncheckedCreateNestedManyWithoutBookInput {
  connect: [BookLogWhereUniqueInput]
  connectOrCreate: [BookLogCreateOrConnectWithoutBookInput]
  create: [BookLogCreateWithoutBookInput]
  createMany: BookLogCreateManyBookInputEnvelope
}

input BookLogUncheckedCreateNestedManyWithoutUserInput {
  connect: [BookLogWhereUniqueInput]
  connectOrCreate: [BookLogCreateOrConnectWithoutUserInput]
  create: [BookLogCreateWithoutUserInput]
  createMany: BookLogCreateManyUserInputEnvelope
}

input BookLogUncheckedCreateWithoutBookInput {
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
  userId: String!
}

input BookLogUncheckedCreateWithoutUserInput {
  bookId: String!
  createdAt: DateTime
  id: String
  log: String!
  updatedAt: DateTime
}

input BookLogUncheckedUpdateInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input BookLogUncheckedUpdateManyInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input BookLogUncheckedUpdateManyWithoutBookInput {
  connect: [BookLogWhereUniqueInput]
  connectOrCreate: [BookLogCreateOrConnectWithoutBookInput]
  create: [BookLogCreateWithoutBookInput]
  createMany: BookLogCreateManyBookInputEnvelope
  delete: [BookLogWhereUniqueInput]
  deleteMany: [BookLogScalarWhereInput]
  disconnect: [BookLogWhereUniqueInput]
  set: [BookLogWhereUniqueInput]
  update: [BookLogUpdateWithWhereUniqueWithoutBookInput]
  updateMany: [BookLogUpdateManyWithWhereWithoutBookInput]
  upsert: [BookLogUpsertWithWhereUniqueWithoutBookInput]
}

input BookLogUncheckedUpdateManyWithoutBookLogsInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookLogUncheckedUpdateManyWithoutUserInput {
  connect: [BookLogWhereUniqueInput]
  connectOrCreate: [BookLogCreateOrConnectWithoutUserInput]
  create: [BookLogCreateWithoutUserInput]
  createMany: BookLogCreateManyUserInputEnvelope
  delete: [BookLogWhereUniqueInput]
  deleteMany: [BookLogScalarWhereInput]
  disconnect: [BookLogWhereUniqueInput]
  set: [BookLogWhereUniqueInput]
  update: [BookLogUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [BookLogUpdateManyWithWhereWithoutUserInput]
  upsert: [BookLogUpsertWithWhereUniqueWithoutUserInput]
}

input BookLogUncheckedUpdateWithoutBookInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input BookLogUncheckedUpdateWithoutUserInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookLogUpdateInput {
  book: BookUpdateOneRequiredWithoutBookLogsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookLogsInput
}

input BookLogUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookLogUpdateManyWithWhereWithoutBookInput {
  data: BookLogUncheckedUpdateManyWithoutBookLogsInput!
  where: BookLogScalarWhereInput!
}

input BookLogUpdateManyWithWhereWithoutUserInput {
  data: BookLogUncheckedUpdateManyWithoutBookLogsInput!
  where: BookLogScalarWhereInput!
}

input BookLogUpdateManyWithoutBookInput {
  connect: [BookLogWhereUniqueInput]
  connectOrCreate: [BookLogCreateOrConnectWithoutBookInput]
  create: [BookLogCreateWithoutBookInput]
  createMany: BookLogCreateManyBookInputEnvelope
  delete: [BookLogWhereUniqueInput]
  deleteMany: [BookLogScalarWhereInput]
  disconnect: [BookLogWhereUniqueInput]
  set: [BookLogWhereUniqueInput]
  update: [BookLogUpdateWithWhereUniqueWithoutBookInput]
  updateMany: [BookLogUpdateManyWithWhereWithoutBookInput]
  upsert: [BookLogUpsertWithWhereUniqueWithoutBookInput]
}

input BookLogUpdateManyWithoutUserInput {
  connect: [BookLogWhereUniqueInput]
  connectOrCreate: [BookLogCreateOrConnectWithoutUserInput]
  create: [BookLogCreateWithoutUserInput]
  createMany: BookLogCreateManyUserInputEnvelope
  delete: [BookLogWhereUniqueInput]
  deleteMany: [BookLogScalarWhereInput]
  disconnect: [BookLogWhereUniqueInput]
  set: [BookLogWhereUniqueInput]
  update: [BookLogUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [BookLogUpdateManyWithWhereWithoutUserInput]
  upsert: [BookLogUpsertWithWhereUniqueWithoutUserInput]
}

input BookLogUpdateWithWhereUniqueWithoutBookInput {
  data: BookLogUncheckedUpdateWithoutBookInput!
  where: BookLogWhereUniqueInput!
}

input BookLogUpdateWithWhereUniqueWithoutUserInput {
  data: BookLogUncheckedUpdateWithoutUserInput!
  where: BookLogWhereUniqueInput!
}

input BookLogUpdateWithoutBookInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookLogsInput
}

input BookLogUpdateWithoutUserInput {
  book: BookUpdateOneRequiredWithoutBookLogsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  log: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookLogUpsertWithWhereUniqueWithoutBookInput {
  create: BookLogUncheckedCreateWithoutBookInput!
  update: BookLogUncheckedUpdateWithoutBookInput!
  where: BookLogWhereUniqueInput!
}

input BookLogUpsertWithWhereUniqueWithoutUserInput {
  create: BookLogUncheckedCreateWithoutUserInput!
  update: BookLogUncheckedUpdateWithoutUserInput!
  where: BookLogWhereUniqueInput!
}

input BookLogWhereInput {
  AND: [BookLogWhereInput]
  NOT: [BookLogWhereInput]
  OR: [BookLogWhereInput]
  book: BookWhereInput
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  log: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input BookLogWhereUniqueInput {
  id: String
}

type BookMaxAggregateOutputType {
  bookLogCount: Int
  bookshelfCount: Int
  createdAt: DateTime
  id: String
  image: String
  title: String
  updatedAt: DateTime
  url: String
}

input BookMaxOrderByAggregateInput {
  bookLogCount: SortOrder
  bookshelfCount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

type BookMinAggregateOutputType {
  bookLogCount: Int
  bookshelfCount: Int
  createdAt: DateTime
  id: String
  image: String
  title: String
  updatedAt: DateTime
  url: String
}

input BookMinOrderByAggregateInput {
  bookLogCount: SortOrder
  bookshelfCount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input BookOrderByWithAggregationInput {
  _avg: BookAvgOrderByAggregateInput
  _count: BookCountOrderByAggregateInput
  _max: BookMaxOrderByAggregateInput
  _min: BookMinOrderByAggregateInput
  _sum: BookSumOrderByAggregateInput
  bookLogCount: SortOrder
  bookshelfCount: SortOrder
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input BookOrderByWithRelationInput {
  bookContents: BookContentOrderByRelationAggregateInput
  bookLogCount: SortOrder
  bookLogs: BookLogOrderByRelationAggregateInput
  bookshelfCount: SortOrder
  bookshelfs: BookshelfOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input BookRelationFilter {
  is: BookWhereInput
  isNot: BookWhereInput
}

enum BookScalarFieldEnum {
  bookLogCount
  bookshelfCount
  createdAt
  id
  image
  title
  updatedAt
  url
}

input BookScalarWhereWithAggregatesInput {
  AND: [BookScalarWhereWithAggregatesInput]
  NOT: [BookScalarWhereWithAggregatesInput]
  OR: [BookScalarWhereWithAggregatesInput]
  bookLogCount: IntWithAggregatesFilter
  bookshelfCount: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  url: StringWithAggregatesFilter
}

type BookSumAggregateOutputType {
  bookLogCount: Int
  bookshelfCount: Int
}

input BookSumOrderByAggregateInput {
  bookLogCount: SortOrder
  bookshelfCount: SortOrder
}

input BookUncheckedCreateInput {
  bookContents: BookContentUncheckedCreateNestedManyWithoutBookInput
  bookLogCount: Int!
  bookLogs: BookLogUncheckedCreateNestedManyWithoutBookInput
  bookshelfCount: Int!
  bookshelfs: BookshelfUncheckedCreateNestedManyWithoutBookInput
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input BookUncheckedCreateWithoutBookContentsInput {
  bookLogCount: Int!
  bookLogs: BookLogUncheckedCreateNestedManyWithoutBookInput
  bookshelfCount: Int!
  bookshelfs: BookshelfUncheckedCreateNestedManyWithoutBookInput
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input BookUncheckedCreateWithoutBookLogsInput {
  bookContents: BookContentUncheckedCreateNestedManyWithoutBookInput
  bookLogCount: Int!
  bookshelfCount: Int!
  bookshelfs: BookshelfUncheckedCreateNestedManyWithoutBookInput
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input BookUncheckedCreateWithoutBookshelfsInput {
  bookContents: BookContentUncheckedCreateNestedManyWithoutBookInput
  bookLogCount: Int!
  bookLogs: BookLogUncheckedCreateNestedManyWithoutBookInput
  bookshelfCount: Int!
  createdAt: DateTime
  id: String
  image: String!
  title: String!
  updatedAt: DateTime
  url: String!
}

input BookUncheckedUpdateInput {
  bookContents: BookContentUncheckedUpdateManyWithoutBookInput
  bookLogCount: IntFieldUpdateOperationsInput
  bookLogs: BookLogUncheckedUpdateManyWithoutBookInput
  bookshelfCount: IntFieldUpdateOperationsInput
  bookshelfs: BookshelfUncheckedUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUncheckedUpdateManyInput {
  bookLogCount: IntFieldUpdateOperationsInput
  bookshelfCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUncheckedUpdateWithoutBookContentsInput {
  bookLogCount: IntFieldUpdateOperationsInput
  bookLogs: BookLogUncheckedUpdateManyWithoutBookInput
  bookshelfCount: IntFieldUpdateOperationsInput
  bookshelfs: BookshelfUncheckedUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUncheckedUpdateWithoutBookLogsInput {
  bookContents: BookContentUncheckedUpdateManyWithoutBookInput
  bookLogCount: IntFieldUpdateOperationsInput
  bookshelfCount: IntFieldUpdateOperationsInput
  bookshelfs: BookshelfUncheckedUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUncheckedUpdateWithoutBookshelfsInput {
  bookContents: BookContentUncheckedUpdateManyWithoutBookInput
  bookLogCount: IntFieldUpdateOperationsInput
  bookLogs: BookLogUncheckedUpdateManyWithoutBookInput
  bookshelfCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUpdateInput {
  bookContents: BookContentUpdateManyWithoutBookInput
  bookLogCount: IntFieldUpdateOperationsInput
  bookLogs: BookLogUpdateManyWithoutBookInput
  bookshelfCount: IntFieldUpdateOperationsInput
  bookshelfs: BookshelfUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUpdateManyMutationInput {
  bookLogCount: IntFieldUpdateOperationsInput
  bookshelfCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUpdateOneRequiredWithoutBookContentsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookContentsInput
  create: BookUncheckedCreateWithoutBookContentsInput
  update: BookUncheckedUpdateWithoutBookContentsInput
  upsert: BookUpsertWithoutBookContentsInput
}

input BookUpdateOneRequiredWithoutBookLogsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookLogsInput
  create: BookUncheckedCreateWithoutBookLogsInput
  update: BookUncheckedUpdateWithoutBookLogsInput
  upsert: BookUpsertWithoutBookLogsInput
}

input BookUpdateOneRequiredWithoutBookshelfsInput {
  connect: BookWhereUniqueInput
  connectOrCreate: BookCreateOrConnectWithoutBookshelfsInput
  create: BookUncheckedCreateWithoutBookshelfsInput
  update: BookUncheckedUpdateWithoutBookshelfsInput
  upsert: BookUpsertWithoutBookshelfsInput
}

input BookUpdateWithoutBookContentsInput {
  bookLogCount: IntFieldUpdateOperationsInput
  bookLogs: BookLogUpdateManyWithoutBookInput
  bookshelfCount: IntFieldUpdateOperationsInput
  bookshelfs: BookshelfUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUpdateWithoutBookLogsInput {
  bookContents: BookContentUpdateManyWithoutBookInput
  bookLogCount: IntFieldUpdateOperationsInput
  bookshelfCount: IntFieldUpdateOperationsInput
  bookshelfs: BookshelfUpdateManyWithoutBookInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUpdateWithoutBookshelfsInput {
  bookContents: BookContentUpdateManyWithoutBookInput
  bookLogCount: IntFieldUpdateOperationsInput
  bookLogs: BookLogUpdateManyWithoutBookInput
  bookshelfCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input BookUpsertWithoutBookContentsInput {
  create: BookUncheckedCreateWithoutBookContentsInput!
  update: BookUncheckedUpdateWithoutBookContentsInput!
}

input BookUpsertWithoutBookLogsInput {
  create: BookUncheckedCreateWithoutBookLogsInput!
  update: BookUncheckedUpdateWithoutBookLogsInput!
}

input BookUpsertWithoutBookshelfsInput {
  create: BookUncheckedCreateWithoutBookshelfsInput!
  update: BookUncheckedUpdateWithoutBookshelfsInput!
}

input BookWhereInput {
  AND: [BookWhereInput]
  NOT: [BookWhereInput]
  OR: [BookWhereInput]
  bookContents: BookContentListRelationFilter
  bookLogCount: IntFilter
  bookLogs: BookLogListRelationFilter
  bookshelfCount: IntFilter
  bookshelfs: BookshelfListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  image: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input BookWhereUniqueInput {
  id: String
}

type Bookshelf {
  book: Book!
  bookId: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input BookshelfBookIdUserIdCompoundUniqueInput {
  bookId: String!
  userId: String!
}

type BookshelfCountAggregateOutputType {
  _all: Int!
  bookId: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input BookshelfCountOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookshelfCreateInput {
  book: BookCreateNestedOneWithoutBookshelfsInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutBookShelfsInput!
}

input BookshelfCreateManyBookInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: String!
}

input BookshelfCreateManyBookInputEnvelope {
  data: BookshelfCreateManyBookInput!
  skipDuplicates: Boolean
}

input BookshelfCreateManyInput {
  bookId: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: String!
}

input BookshelfCreateManyUserInput {
  bookId: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BookshelfCreateManyUserInputEnvelope {
  data: BookshelfCreateManyUserInput!
  skipDuplicates: Boolean
}

input BookshelfCreateNestedManyWithoutBookInput {
  connect: [BookshelfWhereUniqueInput]
  connectOrCreate: [BookshelfCreateOrConnectWithoutBookInput]
  create: [BookshelfCreateWithoutBookInput]
  createMany: BookshelfCreateManyBookInputEnvelope
}

input BookshelfCreateNestedManyWithoutUserInput {
  connect: [BookshelfWhereUniqueInput]
  connectOrCreate: [BookshelfCreateOrConnectWithoutUserInput]
  create: [BookshelfCreateWithoutUserInput]
  createMany: BookshelfCreateManyUserInputEnvelope
}

input BookshelfCreateOrConnectWithoutBookInput {
  create: BookshelfUncheckedCreateWithoutBookInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfCreateOrConnectWithoutUserInput {
  create: BookshelfUncheckedCreateWithoutUserInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfCreateWithoutBookInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutBookShelfsInput!
}

input BookshelfCreateWithoutUserInput {
  book: BookCreateNestedOneWithoutBookshelfsInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BookshelfListRelationFilter {
  every: BookshelfWhereInput
  none: BookshelfWhereInput
  some: BookshelfWhereInput
}

type BookshelfMaxAggregateOutputType {
  bookId: String
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: String
}

input BookshelfMaxOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type BookshelfMinAggregateOutputType {
  bookId: String
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: String
}

input BookshelfMinOrderByAggregateInput {
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookshelfOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookshelfOrderByWithAggregationInput {
  _count: BookshelfCountOrderByAggregateInput
  _max: BookshelfMaxOrderByAggregateInput
  _min: BookshelfMinOrderByAggregateInput
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input BookshelfOrderByWithRelationInput {
  book: BookOrderByWithRelationInput
  bookId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum BookshelfScalarFieldEnum {
  bookId
  createdAt
  id
  updatedAt
  userId
}

input BookshelfScalarWhereInput {
  AND: [BookshelfScalarWhereInput]
  NOT: [BookshelfScalarWhereInput]
  OR: [BookshelfScalarWhereInput]
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input BookshelfScalarWhereWithAggregatesInput {
  AND: [BookshelfScalarWhereWithAggregatesInput]
  NOT: [BookshelfScalarWhereWithAggregatesInput]
  OR: [BookshelfScalarWhereWithAggregatesInput]
  bookId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input BookshelfUncheckedCreateInput {
  bookId: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: String!
}

input BookshelfUncheckedCreateNestedManyWithoutBookInput {
  connect: [BookshelfWhereUniqueInput]
  connectOrCreate: [BookshelfCreateOrConnectWithoutBookInput]
  create: [BookshelfCreateWithoutBookInput]
  createMany: BookshelfCreateManyBookInputEnvelope
}

input BookshelfUncheckedCreateNestedManyWithoutUserInput {
  connect: [BookshelfWhereUniqueInput]
  connectOrCreate: [BookshelfCreateOrConnectWithoutUserInput]
  create: [BookshelfCreateWithoutUserInput]
  createMany: BookshelfCreateManyUserInputEnvelope
}

input BookshelfUncheckedCreateWithoutBookInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: String!
}

input BookshelfUncheckedCreateWithoutUserInput {
  bookId: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BookshelfUncheckedUpdateInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input BookshelfUncheckedUpdateManyInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input BookshelfUncheckedUpdateManyWithoutBookInput {
  connect: [BookshelfWhereUniqueInput]
  connectOrCreate: [BookshelfCreateOrConnectWithoutBookInput]
  create: [BookshelfCreateWithoutBookInput]
  createMany: BookshelfCreateManyBookInputEnvelope
  delete: [BookshelfWhereUniqueInput]
  deleteMany: [BookshelfScalarWhereInput]
  disconnect: [BookshelfWhereUniqueInput]
  set: [BookshelfWhereUniqueInput]
  update: [BookshelfUpdateWithWhereUniqueWithoutBookInput]
  updateMany: [BookshelfUpdateManyWithWhereWithoutBookInput]
  upsert: [BookshelfUpsertWithWhereUniqueWithoutBookInput]
}

input BookshelfUncheckedUpdateManyWithoutBookShelfsInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookshelfUncheckedUpdateManyWithoutBookshelfsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input BookshelfUncheckedUpdateManyWithoutUserInput {
  connect: [BookshelfWhereUniqueInput]
  connectOrCreate: [BookshelfCreateOrConnectWithoutUserInput]
  create: [BookshelfCreateWithoutUserInput]
  createMany: BookshelfCreateManyUserInputEnvelope
  delete: [BookshelfWhereUniqueInput]
  deleteMany: [BookshelfScalarWhereInput]
  disconnect: [BookshelfWhereUniqueInput]
  set: [BookshelfWhereUniqueInput]
  update: [BookshelfUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [BookshelfUpdateManyWithWhereWithoutUserInput]
  upsert: [BookshelfUpsertWithWhereUniqueWithoutUserInput]
}

input BookshelfUncheckedUpdateWithoutBookInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input BookshelfUncheckedUpdateWithoutUserInput {
  bookId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookshelfUpdateInput {
  book: BookUpdateOneRequiredWithoutBookshelfsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookShelfsInput
}

input BookshelfUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookshelfUpdateManyWithWhereWithoutBookInput {
  data: BookshelfUncheckedUpdateManyWithoutBookshelfsInput!
  where: BookshelfScalarWhereInput!
}

input BookshelfUpdateManyWithWhereWithoutUserInput {
  data: BookshelfUncheckedUpdateManyWithoutBookShelfsInput!
  where: BookshelfScalarWhereInput!
}

input BookshelfUpdateManyWithoutBookInput {
  connect: [BookshelfWhereUniqueInput]
  connectOrCreate: [BookshelfCreateOrConnectWithoutBookInput]
  create: [BookshelfCreateWithoutBookInput]
  createMany: BookshelfCreateManyBookInputEnvelope
  delete: [BookshelfWhereUniqueInput]
  deleteMany: [BookshelfScalarWhereInput]
  disconnect: [BookshelfWhereUniqueInput]
  set: [BookshelfWhereUniqueInput]
  update: [BookshelfUpdateWithWhereUniqueWithoutBookInput]
  updateMany: [BookshelfUpdateManyWithWhereWithoutBookInput]
  upsert: [BookshelfUpsertWithWhereUniqueWithoutBookInput]
}

input BookshelfUpdateManyWithoutUserInput {
  connect: [BookshelfWhereUniqueInput]
  connectOrCreate: [BookshelfCreateOrConnectWithoutUserInput]
  create: [BookshelfCreateWithoutUserInput]
  createMany: BookshelfCreateManyUserInputEnvelope
  delete: [BookshelfWhereUniqueInput]
  deleteMany: [BookshelfScalarWhereInput]
  disconnect: [BookshelfWhereUniqueInput]
  set: [BookshelfWhereUniqueInput]
  update: [BookshelfUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [BookshelfUpdateManyWithWhereWithoutUserInput]
  upsert: [BookshelfUpsertWithWhereUniqueWithoutUserInput]
}

input BookshelfUpdateWithWhereUniqueWithoutBookInput {
  data: BookshelfUncheckedUpdateWithoutBookInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfUpdateWithWhereUniqueWithoutUserInput {
  data: BookshelfUncheckedUpdateWithoutUserInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfUpdateWithoutBookInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookShelfsInput
}

input BookshelfUpdateWithoutUserInput {
  book: BookUpdateOneRequiredWithoutBookshelfsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BookshelfUpsertWithWhereUniqueWithoutBookInput {
  create: BookshelfUncheckedCreateWithoutBookInput!
  update: BookshelfUncheckedUpdateWithoutBookInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfUpsertWithWhereUniqueWithoutUserInput {
  create: BookshelfUncheckedCreateWithoutUserInput!
  update: BookshelfUncheckedUpdateWithoutUserInput!
  where: BookshelfWhereUniqueInput!
}

input BookshelfWhereInput {
  AND: [BookshelfWhereInput]
  NOT: [BookshelfWhereInput]
  OR: [BookshelfWhereInput]
  book: BookWhereInput
  bookId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input BookshelfWhereUniqueInput {
  bookId_userId: BookshelfBookIdUserIdCompoundUniqueInput
  id: String
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

"""Json custom scalar type"""
scalar Json

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  book(id: String!): Book!
  bookLogs(userId: String!): [BookLog!]!
  books: [Book!]!
  booksSearch(keyword: String!): [Book!]!
  bookshelfs(userId: String!): [Bookshelf!]!
}

type Session {
  expires: DateTime!
  id: ID!
  sessionToken: String!
  user: User!
  userId: String!
}

type SessionCountAggregateOutputType {
  _all: Int!
  expires: Int!
  id: Int!
  sessionToken: Int!
  userId: Int!
}

input SessionCountOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionCreateInput {
  expires: DateTime!
  id: String
  sessionToken: String!
  user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
  expires: DateTime!
  id: String
  sessionToken: String!
  userId: String!
}

input SessionCreateManyUserInput {
  expires: DateTime!
  id: String
  sessionToken: String!
}

input SessionCreateManyUserInputEnvelope {
  data: SessionCreateManyUserInput!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput]
  create: [SessionCreateWithoutUserInput]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionUncheckedCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  expires: DateTime!
  id: String
  sessionToken: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

type SessionMaxAggregateOutputType {
  expires: DateTime
  id: String
  sessionToken: String
  userId: String
}

input SessionMaxOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

type SessionMinAggregateOutputType {
  expires: DateTime
  id: String
  sessionToken: String
  userId: String
}

input SessionMinOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionOrderByWithAggregationInput {
  _count: SessionCountOrderByAggregateInput
  _max: SessionMaxOrderByAggregateInput
  _min: SessionMinOrderByAggregateInput
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByWithRelationInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  expires
  id
  sessionToken
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput]
  NOT: [SessionScalarWhereInput]
  OR: [SessionScalarWhereInput]
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  userId: StringFilter
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput]
  NOT: [SessionScalarWhereWithAggregatesInput]
  OR: [SessionScalarWhereWithAggregatesInput]
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  sessionToken: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SessionUncheckedCreateInput {
  expires: DateTime!
  id: String
  sessionToken: String!
  userId: String!
}

input SessionUncheckedCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput]
  create: [SessionCreateWithoutUserInput]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionUncheckedCreateWithoutUserInput {
  expires: DateTime!
  id: String
  sessionToken: String!
}

input SessionUncheckedUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input SessionUncheckedUpdateManyInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input SessionUncheckedUpdateManyWithoutSessionsInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUncheckedUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput]
  create: [SessionCreateWithoutUserInput]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput]
  deleteMany: [SessionScalarWhereInput]
  disconnect: [SessionWhereUniqueInput]
  set: [SessionWhereUniqueInput]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput]
}

input SessionUncheckedUpdateWithoutUserInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSessionsInput
}

input SessionUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUncheckedUpdateManyWithoutSessionsInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput]
  create: [SessionCreateWithoutUserInput]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput]
  deleteMany: [SessionScalarWhereInput]
  disconnect: [SessionWhereUniqueInput]
  set: [SessionWhereUniqueInput]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUncheckedUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionUncheckedCreateWithoutUserInput!
  update: SessionUncheckedUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput]
  NOT: [SessionWhereInput]
  OR: [SessionWhereInput]
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input SessionWhereUniqueInput {
  id: String
  sessionToken: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type TopicsAvgAggregateOutputType {
  id: Float
  likes: Float
}

type TopicsCountAggregateOutputType {
  _all: Int!
  content: Int!
  id: Int!
  likes: Int!
}

type TopicsMaxAggregateOutputType {
  content: String
  id: Int
  likes: Int
}

type TopicsMinAggregateOutputType {
  content: String
  id: Int
  likes: Int
}

enum TopicsScalarFieldEnum {
  content
  id
  likes
}

type TopicsSumAggregateOutputType {
  id: Int
  likes: Int
}

type User {
  accounts: [Account!]!
  bookLogs: [BookLog!]!
  bookShelfs: [Bookshelf!]!
  email: String
  emailVerified: DateTime
  id: ID!
  image: String
  name: String
  sessions: [Session!]!
}

type UserCountAggregateOutputType {
  _all: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  image: Int!
  name: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
}

type UserCountOutputType {
  accounts: Int!
  bookLogs: Int!
  bookShelfs: Int!
  sessions: Int!
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  bookLogs: BookLogCreateNestedManyWithoutUserInput
  bookShelfs: BookshelfCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  sessions: SessionCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserUncheckedCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutBookLogsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookLogsInput
  create: UserUncheckedCreateWithoutBookLogsInput
}

input UserCreateNestedOneWithoutBookShelfsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookShelfsInput
  create: UserUncheckedCreateWithoutBookShelfsInput
}

input UserCreateNestedOneWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserUncheckedCreateWithoutSessionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserUncheckedCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutBookLogsInput {
  create: UserUncheckedCreateWithoutBookLogsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutBookShelfsInput {
  create: UserUncheckedCreateWithoutBookShelfsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
  create: UserUncheckedCreateWithoutSessionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  bookLogs: BookLogCreateNestedManyWithoutUserInput
  bookShelfs: BookshelfCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  sessions: SessionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutBookLogsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  bookShelfs: BookshelfCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  sessions: SessionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutBookShelfsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  bookLogs: BookLogCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  sessions: SessionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSessionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  bookLogs: BookLogCreateNestedManyWithoutUserInput
  bookShelfs: BookshelfCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
}

type UserMaxAggregateOutputType {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
}

type UserMinAggregateOutputType {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  bookLogs: BookLogOrderByRelationAggregateInput
  bookShelfs: BookshelfOrderByRelationAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  sessions: SessionOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  emailVerified
  id
  image
  name
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  email: StringNullableWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
}

input UserUncheckedCreateInput {
  accounts: AccountUncheckedCreateNestedManyWithoutUserInput
  bookLogs: BookLogUncheckedCreateNestedManyWithoutUserInput
  bookShelfs: BookshelfUncheckedCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  sessions: SessionUncheckedCreateNestedManyWithoutUserInput
}

input UserUncheckedCreateWithoutAccountsInput {
  bookLogs: BookLogUncheckedCreateNestedManyWithoutUserInput
  bookShelfs: BookshelfUncheckedCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  sessions: SessionUncheckedCreateNestedManyWithoutUserInput
}

input UserUncheckedCreateWithoutBookLogsInput {
  accounts: AccountUncheckedCreateNestedManyWithoutUserInput
  bookShelfs: BookshelfUncheckedCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  sessions: SessionUncheckedCreateNestedManyWithoutUserInput
}

input UserUncheckedCreateWithoutBookShelfsInput {
  accounts: AccountUncheckedCreateNestedManyWithoutUserInput
  bookLogs: BookLogUncheckedCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  sessions: SessionUncheckedCreateNestedManyWithoutUserInput
}

input UserUncheckedCreateWithoutSessionsInput {
  accounts: AccountUncheckedCreateNestedManyWithoutUserInput
  bookLogs: BookLogUncheckedCreateNestedManyWithoutUserInput
  bookShelfs: BookshelfUncheckedCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
}

input UserUncheckedUpdateInput {
  accounts: AccountUncheckedUpdateManyWithoutUserInput
  bookLogs: BookLogUncheckedUpdateManyWithoutUserInput
  bookShelfs: BookshelfUncheckedUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUncheckedUpdateManyWithoutUserInput
}

input UserUncheckedUpdateManyInput {
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutAccountsInput {
  bookLogs: BookLogUncheckedUpdateManyWithoutUserInput
  bookShelfs: BookshelfUncheckedUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUncheckedUpdateManyWithoutUserInput
}

input UserUncheckedUpdateWithoutBookLogsInput {
  accounts: AccountUncheckedUpdateManyWithoutUserInput
  bookShelfs: BookshelfUncheckedUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUncheckedUpdateManyWithoutUserInput
}

input UserUncheckedUpdateWithoutBookShelfsInput {
  accounts: AccountUncheckedUpdateManyWithoutUserInput
  bookLogs: BookLogUncheckedUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUncheckedUpdateManyWithoutUserInput
}

input UserUncheckedUpdateWithoutSessionsInput {
  accounts: AccountUncheckedUpdateManyWithoutUserInput
  bookLogs: BookLogUncheckedUpdateManyWithoutUserInput
  bookShelfs: BookshelfUncheckedUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserInput
  bookLogs: BookLogUpdateManyWithoutUserInput
  bookShelfs: BookshelfUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserUncheckedCreateWithoutAccountsInput
  update: UserUncheckedUpdateWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutBookLogsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookLogsInput
  create: UserUncheckedCreateWithoutBookLogsInput
  update: UserUncheckedUpdateWithoutBookLogsInput
  upsert: UserUpsertWithoutBookLogsInput
}

input UserUpdateOneRequiredWithoutBookShelfsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBookShelfsInput
  create: UserUncheckedCreateWithoutBookShelfsInput
  update: UserUncheckedUpdateWithoutBookShelfsInput
  upsert: UserUpsertWithoutBookShelfsInput
}

input UserUpdateOneRequiredWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserUncheckedCreateWithoutSessionsInput
  update: UserUncheckedUpdateWithoutSessionsInput
  upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateWithoutAccountsInput {
  bookLogs: BookLogUpdateManyWithoutUserInput
  bookShelfs: BookshelfUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserInput
}

input UserUpdateWithoutBookLogsInput {
  accounts: AccountUpdateManyWithoutUserInput
  bookShelfs: BookshelfUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserInput
}

input UserUpdateWithoutBookShelfsInput {
  accounts: AccountUpdateManyWithoutUserInput
  bookLogs: BookLogUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserInput
}

input UserUpdateWithoutSessionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  bookLogs: BookLogUpdateManyWithoutUserInput
  bookShelfs: BookshelfUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
  create: UserUncheckedCreateWithoutAccountsInput!
  update: UserUncheckedUpdateWithoutAccountsInput!
}

input UserUpsertWithoutBookLogsInput {
  create: UserUncheckedCreateWithoutBookLogsInput!
  update: UserUncheckedUpdateWithoutBookLogsInput!
}

input UserUpsertWithoutBookShelfsInput {
  create: UserUncheckedCreateWithoutBookShelfsInput!
  update: UserUncheckedUpdateWithoutBookShelfsInput!
}

input UserUpsertWithoutSessionsInput {
  create: UserUncheckedCreateWithoutSessionsInput!
  update: UserUncheckedUpdateWithoutSessionsInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  accounts: AccountListRelationFilter
  bookLogs: BookLogListRelationFilter
  bookShelfs: BookshelfListRelationFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringNullableFilter
  sessions: SessionListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type UsersAvgAggregateOutputType {
  id: Float
}

type UsersCountAggregateOutputType {
  _all: Int!
  email: Int!
  id: Int!
  name: Int!
  password: Int!
}

type UsersMaxAggregateOutputType {
  email: String
  id: Int
  name: String
  password: String
}

type UsersMinAggregateOutputType {
  email: String
  id: Int
  name: String
  password: String
}

enum UsersScalarFieldEnum {
  email
  id
  name
  password
}

type UsersSumAggregateOutputType {
  id: Int
}

type VerificationToken {
  expires: DateTime!
  identifier: String!
  token: String!
}

type VerificationTokenCountAggregateOutputType {
  _all: Int!
  expires: Int!
  identifier: Int!
  token: Int!
}

input VerificationTokenCountOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenCreateInput {
  expires: DateTime!
  identifier: String!
  token: String!
}

input VerificationTokenCreateManyInput {
  expires: DateTime!
  identifier: String!
  token: String!
}

input VerificationTokenIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

type VerificationTokenMaxAggregateOutputType {
  expires: DateTime
  identifier: String
  token: String
}

input VerificationTokenMaxOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

type VerificationTokenMinAggregateOutputType {
  expires: DateTime
  identifier: String
  token: String
}

input VerificationTokenMinOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithAggregationInput {
  _count: VerificationTokenCountOrderByAggregateInput
  _max: VerificationTokenMaxOrderByAggregateInput
  _min: VerificationTokenMinOrderByAggregateInput
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithRelationInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

enum VerificationTokenScalarFieldEnum {
  expires
  identifier
  token
}

input VerificationTokenScalarWhereWithAggregatesInput {
  AND: [VerificationTokenScalarWhereWithAggregatesInput]
  NOT: [VerificationTokenScalarWhereWithAggregatesInput]
  OR: [VerificationTokenScalarWhereWithAggregatesInput]
  expires: DateTimeWithAggregatesFilter
  identifier: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input VerificationTokenUncheckedCreateInput {
  expires: DateTime!
  identifier: String!
  token: String!
}

input VerificationTokenUncheckedUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUncheckedUpdateManyInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput]
  NOT: [VerificationTokenWhereInput]
  OR: [VerificationTokenWhereInput]
  expires: DateTimeFilter
  identifier: StringFilter
  token: StringFilter
}

input VerificationTokenWhereUniqueInput {
  identifier_token: VerificationTokenIdentifierTokenCompoundUniqueInput
  token: String
}

input topicsAvgOrderByAggregateInput {
  id: SortOrder
  likes: SortOrder
}

input topicsCountOrderByAggregateInput {
  content: SortOrder
  id: SortOrder
  likes: SortOrder
}

input topicsCreateInput {
  content: String!
  likes: Int!
}

input topicsCreateManyInput {
  content: String!
  id: Int
  likes: Int!
}

input topicsMaxOrderByAggregateInput {
  content: SortOrder
  id: SortOrder
  likes: SortOrder
}

input topicsMinOrderByAggregateInput {
  content: SortOrder
  id: SortOrder
  likes: SortOrder
}

input topicsOrderByWithAggregationInput {
  _avg: topicsAvgOrderByAggregateInput
  _count: topicsCountOrderByAggregateInput
  _max: topicsMaxOrderByAggregateInput
  _min: topicsMinOrderByAggregateInput
  _sum: topicsSumOrderByAggregateInput
  content: SortOrder
  id: SortOrder
  likes: SortOrder
}

input topicsOrderByWithRelationInput {
  content: SortOrder
  id: SortOrder
  likes: SortOrder
}

input topicsScalarWhereWithAggregatesInput {
  AND: [topicsScalarWhereWithAggregatesInput]
  NOT: [topicsScalarWhereWithAggregatesInput]
  OR: [topicsScalarWhereWithAggregatesInput]
  content: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  likes: IntWithAggregatesFilter
}

input topicsSumOrderByAggregateInput {
  id: SortOrder
  likes: SortOrder
}

input topicsUncheckedCreateInput {
  content: String!
  id: Int
  likes: Int!
}

input topicsUncheckedUpdateInput {
  content: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
}

input topicsUncheckedUpdateManyInput {
  content: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
}

input topicsUpdateInput {
  content: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
}

input topicsUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
}

input topicsWhereInput {
  AND: [topicsWhereInput]
  NOT: [topicsWhereInput]
  OR: [topicsWhereInput]
  content: StringFilter
  id: IntFilter
  likes: IntFilter
}

input topicsWhereUniqueInput {
  id: Int
}

input usersAvgOrderByAggregateInput {
  id: SortOrder
}

input usersCountOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input usersCreateInput {
  email: String!
  name: String
  password: String!
}

input usersCreateManyInput {
  email: String!
  id: Int
  name: String
  password: String!
}

input usersMaxOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input usersMinOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input usersOrderByWithAggregationInput {
  _avg: usersAvgOrderByAggregateInput
  _count: usersCountOrderByAggregateInput
  _max: usersMaxOrderByAggregateInput
  _min: usersMinOrderByAggregateInput
  _sum: usersSumOrderByAggregateInput
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input usersOrderByWithRelationInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input usersScalarWhereWithAggregatesInput {
  AND: [usersScalarWhereWithAggregatesInput]
  NOT: [usersScalarWhereWithAggregatesInput]
  OR: [usersScalarWhereWithAggregatesInput]
  email: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  password: StringWithAggregatesFilter
}

input usersSumOrderByAggregateInput {
  id: SortOrder
}

input usersUncheckedCreateInput {
  email: String!
  id: Int
  name: String
  password: String!
}

input usersUncheckedUpdateInput {
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input usersUncheckedUpdateManyInput {
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input usersUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input usersUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input usersWhereInput {
  AND: [usersWhereInput]
  NOT: [usersWhereInput]
  OR: [usersWhereInput]
  email: StringFilter
  id: IntFilter
  name: StringNullableFilter
  password: StringFilter
}

input usersWhereUniqueInput {
  id: Int
}