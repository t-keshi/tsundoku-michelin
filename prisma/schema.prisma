generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// tagarela

model topics {
  id      Int    @id @default(autoincrement())
  content String @db.VarChar(255)
  likes   Int
}

// next-auth

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?     @db.VarChar(512)
  profile       String?
  onboarding    String?
  accounts      Account[]
  sessions      Session[]
  bookLogs      BookLog[]
  bookshelfs    Bookshelf[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Book {
  id             String        @id @default(cuid())
  title          String
  image          String        @db.VarChar(512)
  url            String        @db.VarChar(512)
  bookLogCount   Int
  bookshelfCount Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  bookContents   BookContent[]
  bookLogs       BookLog[]
  bookshelfs     Bookshelf[]

  @@map("book")
}

model BookContent {
  id        String   @id @default(cuid())
  bookId    String
  index     Float
  type      String
  heading   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("book_content")
}

model BookLog {
  id        String   @id @default(cuid())
  bookId    String
  userId    String
  log       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([bookId, userId])
  @@map("book_log")
}

model Bookshelf {
  id        String   @id @default(cuid())
  bookId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([bookId, userId])
  @@map("bookshelf")
}
