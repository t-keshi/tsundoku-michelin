generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// tagarela

model topics {
  id      Int    @id @default(autoincrement())
  content String @db.VarChar(255)
  likes   Int
}

model users {
  id       Int     @id @default(autoincrement())
  email    String  @db.VarChar(255)
  password String  @db.VarChar(255)
  name     String? @db.VarChar(255)
}

// next-auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userBookLog   UserBookLog[]
  userBookShelf UserBookShelf[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id             String          @id @default(cuid())
  title          String
  image          String
  url            String          @db.Text
  bookLogCount   Int
  bookshelfCount Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bookContent    BookContent[]
  userBookLog    UserBookLog[]
  userBookShelf  UserBookShelf[]
}

model BookContent {
  id        String   @id @default(cuid())
  bookId    String
  index     Float
  type      String
  heading   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model UserBookLog {
  id        String   @id @default(cuid())
  bookId    String
  userId    String
  log       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBookShelf {
  id        String   @id @default(cuid())
  bookId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
